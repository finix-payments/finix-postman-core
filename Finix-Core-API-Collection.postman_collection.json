{
	"info": {
		"_postman_id": "50fa35a6-ed24-459a-b831-3de459fba187",
		"name": "Finix-Core-API-Collection",
		"description": "# Finix Core API Collection\n\nThis Postman Collection includes the following  collections:\n\n- [Getting Started Guide](https://developers.finixpayments.com/#getting-started)\n- [Onboard a merchant](https://developers.finixpayments.com/#step-1-create-an-identity-for-a-merchant)\n- [Create a card sale](https://developers.finixpayments.com/#step-4-create-an-identity-for-a-buyer)\n- [Subscription Billing](https://finix.admin.payments-docs.com/#subscription-billing)\n\nUse the __Finix Core API Environment__ to set the appropriate credentials.\n\nIf you are facing any issues with the credentials, you can reach out to your Sales Engineer or use the credentials available [here](https://developers.finixpayments.com/#authentication).\n\nFor Subscription Billing, you will require __ROLE_PLATFORM__ credentials. You can use the ones that are available in the Environment Variables file or use the credentials provided in the Curl command for Subscription Billing [here](https://finix.admin.payments-docs.com/#subscription-billing).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Getting Started Guide",
			"item": [
				{
					"name": "Step 1: Create an Identity for a Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"identity\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"Studio Rating\": \"4.7\"\n    },\n    \"entity\": {\n        \"last_name\": \"Sunkhronos\",\n        \"max_transaction_amount\": 12000000,\n        \"has_accepted_credit_cards_previously\": true,\n        \"default_statement_descriptor\": \"DMPC\",\n        \"personal_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 7\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        },\n        \"incorporation_date\": {\n            \"year\": 1978,\n            \"day\": 27,\n            \"month\": 6\n        },\n        \"business_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 8\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        },\n        \"ownership_type\": \"PRIVATE\",\n        \"first_name\": \"Jim\",\n        \"title\": \"CEO\",\n        \"business_tax_id\": \"123456789\",\n        \"doing_business_as\": \"Dunder Mifflin Paper Company\",\n        \"principal_percentage_ownership\": 50,\n        \"email\": \"user@example.org\",\n        \"mcc\": \"0742\",\n        \"phone\": \"1234567890\",\n        \"business_name\": \"Dunder Mifflin Paper Company\",\n        \"tax_id\": \"123456789\",\n        \"business_type\": \"INDIVIDUAL_SOLE_PROPRIETORSHIP\",\n        \"business_phone\": \"+1 (408) 756-4497\",\n        \"dob\": {\n            \"year\": 1978,\n            \"day\": 27,\n            \"month\": 6\n        },\n        \"url\": \"www.DMPC.com\",\n        \"annual_card_volume\": 12000000\n    }\n}'\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities/",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities",
								""
							]
						},
						"description": "Let’s start with the first step by creating an Identity resource. Each Identity represents either a person or a business. We use this resource to associate cards and payouts. This structure makes it simple to manage and reconcile payment instruments and payout history. Accounting of funds is done using the Identity so it’s recommended to have an Identity per recipient of funds. Additionally, the Identity resource is optionally used to collect KYC information.\n\nYou’ll want to store the ID of the newly created Identity resource for reference later."
					},
					"response": []
				},
				{
					"name": "Step 2: Tokenize a Bank Account for Funding your Merchant",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_type\": \"SAVINGS\",\n    \"name\": \"Alice\",\n    \"tags\": {\n        \"Bank Account\": \"Company Account\"\n    },\n    \"country\": \"USA\",\n    \"bank_code\": \"123123123\",\n    \"account_number\": \"123123123\",\n    \"type\": \"BANK_ACCOUNT\",\n    \"identity\": \"{{identity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/payment_instruments",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"payment_instruments"
							]
						},
						"description": "Now that we’ve created an Identity for our merchant, we’ll need to add a bank account where funds will be disbursed (i.e. their funding account).\n\nIn the API, bank accounts – as well as credit cards – are represented by the Payment Instrument resource.\n\nTo classify the Payment Instrument as a bank account you’ll need to pass BANK_ACCOUNT in the type field of your request, and you’ll also want to pass the ID of the Identity that you created in the last step via the identity field to properly associate it with your merchant."
					},
					"response": []
				},
				{
					"name": "Step 3: Provision Merchant Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"merchantId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"key_2\": \"value_2\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities/{{identity}}/merchants",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities",
								"{{identity}}",
								"merchants"
							]
						},
						"description": "Now that we’ve associated a Payment Instrument with our seller’s Identity we’re ready to provision a Merchant account. This is the last step before you can begin processing on their behalf. Luckily you’ve already done most of the heavy lifting. Just make one final POST request, and you’ll be returned a Merchant resource. Take a second to inspect this newly created resource, particularly the onboarding_state, which can have 3 potential states that indicate its ability to process and settle funds:\n\nPROVISIONING: Request is pending (state will typically change after two minutes)\n\nprocessing_enabled: False\nsettlement_enabled: False\nAPPROVED: Merchant has been approved and can begin processing\n\nprocessing_enabled: True\nsettlement_enabled: True\nREJECTED: Merchant was rejected by the processor either because the information collected was invalid or it failed one of a number of regulatory and/or compliance checks (e.g. KYC, OFAC or MATCH)\n\nprocessing_enabled: False\nsettlement_enabled: False"
					},
					"response": []
				},
				{
					"name": "Step 4: Create an Identity for a Buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"buyerId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"key\": \"value\"\n    },\n    \"entity\": {\n        \"phone\": \"7145677613\",\n        \"first_name\": \"Bob\",\n        \"last_name\": \"Diaz\",\n        \"email\": \"therock@gmail.com\",\n        \"personal_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 7\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities"
							]
						},
						"description": "Now that we have successfully provisioned a Merchant we’ll need to create an Identity that represents your buyer. Don’t worry though you won’t need to capture the same amount of information from your buyer."
					},
					"response": []
				},
				{
					"name": "Step 5: Tokenize a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"paymentInstrumentId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ayisha Kline\",\n    \"expiration_year\": 2029,\n    \"tags\": {\n        \"card_name\": \"Business Card\"\n    },\n    \"number\": \"4895142232120006\",\n    \"expiration_month\": 3,\n    \"address\": {\n        \"city\": \"San Francisco\",\n        \"region\": \"CA\",\n        \"postal_code\": \"94404\",\n        \"line1\": \"900 Metro Center Blv\",\n        \"country\": \"USA\"\n    },\n    \"security_code\": \"022\",\n    \"type\": \"PAYMENT_CARD\",\n    \"identity\": \"{{buyerId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/payment_instruments",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"payment_instruments"
							]
						},
						"description": "Now that we have an Identity resource representing our buyer, we’ll need to create a Payment Instrument which represents the credit card you’ll be debiting (i.e. charging)."
					},
					"response": []
				},
				{
					"name": "Step 6: Create Sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"transferId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant\": \"{{merchantId}}\",\n    \"currency\": \"USD\",\n    \"amount\": 2995,\n    \"source\": \"{{paymentInstrumentId}}\",\n    \"tags\": {\n        \"test\": \"sale\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/transfers",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "Next you’ll need to create a Transfer. To generate a Transfer we’ll supply the buyer’s Payment Instrument ID as the source field and the seller’s Merchant ID in the merchant field. Note that the amount field is in cents. These specific Transfers are distinguished by their type which return DEBIT."
					},
					"response": []
				}
			],
			"description": "The __Getting Started Guide__ will walk --through the 6 steps is takes to Onboard a Merchant and then create a Card sale against that merchant.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{rolePartnerPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{rolePartnerUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Merchant Onboarding",
			"item": [
				{
					"name": "Create an Identity for a Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"identity\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"Studio Rating\": \"4.7\"\n    },\n    \"entity\": {\n        \"last_name\": \"Sunkhronos\",\n        \"max_transaction_amount\": 12000000,\n        \"has_accepted_credit_cards_previously\": true,\n        \"default_statement_descriptor\": \"Dunder Mifflin\",\n        \"personal_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 7\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        },\n        \"incorporation_date\": {\n            \"year\": 1978,\n            \"day\": 27,\n            \"month\": 6\n        },\n        \"business_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 8\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        },\n        \"ownership_type\": \"PRIVATE\",\n        \"first_name\": \"dwayne\",\n        \"title\": \"CEO\",\n        \"business_tax_id\": \"123456789\",\n        \"doing_business_as\": \"Dunder Mifflin\",\n        \"principal_percentage_ownership\": 50,\n        \"email\": \"user@example.org\",\n        \"mcc\": \"0742\",\n        \"phone\": \"1234567890\",\n        \"business_name\": \"Dunder Mifflin\",\n        \"tax_id\": \"123456789\",\n        \"business_type\": \"INDIVIDUAL_SOLE_PROPRIETORSHIP\",\n        \"business_phone\": \"+1 (408) 756-4497\",\n        \"dob\": {\n            \"year\": 1978,\n            \"day\": 27,\n            \"month\": 6\n        },\n        \"url\": \"www.DunderMifflin.com\",\n        \"annual_card_volume\": 12000000\n    }\n}'\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities"
							]
						},
						"description": "Let’s start with the first step by creating an Identity resource. Each Identity represents either a person or a business. We use this resource to associate cards and payouts. This structure makes it simple to manage and reconcile payment instruments and payout history. Accounting of funds is done using the Identity so it’s recommended to have an Identity per recipient of funds. Additionally, the Identity resource is optionally used to collect KYC information.\n\nYou’ll want to store the ID of the newly created Identity resource for reference later."
					},
					"response": []
				},
				{
					"name": "Tokenize a Bank Account for Funding your Merchant",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_type\": \"SAVINGS\",\n    \"name\": \"Alice\",\n    \"tags\": {\n        \"Bank Account\": \"Company Account\"\n    },\n    \"country\": \"USA\",\n    \"bank_code\": \"123123123\",\n    \"account_number\": \"123123123\",\n    \"type\": \"BANK_ACCOUNT\",\n    \"identity\": \"{{identity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/payment_instruments",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"payment_instruments"
							]
						},
						"description": "Now that we’ve created an Identity for our merchant, we’ll need to add a bank account where funds will be disbursed (i.e. their funding account).\n\nIn the API, bank accounts – as well as credit cards – are represented by the Payment Instrument resource.\n\nTo classify the Payment Instrument as a bank account you’ll need to pass BANK_ACCOUNT in the type field of your request, and you’ll also want to pass the ID of the Identity that you created in the last step via the identity field to properly associate it with your merchant."
					},
					"response": []
				},
				{
					"name": "Provision Merchant Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"merchantId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"key_2\": \"value_2\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities/{{identity}}/merchants",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities",
								"{{identity}}",
								"merchants"
							]
						},
						"description": "Now that we’ve associated a Payment Instrument with our seller’s Identity we’re ready to provision a Merchant account. This is the last step before you can begin processing on their behalf. Luckily you’ve already done most of the heavy lifting. Just make one final POST request, and you’ll be returned a Merchant resource. Take a second to inspect this newly created resource, particularly the onboarding_state, which can have 3 potential states that indicate its ability to process and settle funds:\n\nPROVISIONING: Request is pending (state will typically change after two minutes)\n\nprocessing_enabled: False\nsettlement_enabled: False\nAPPROVED: Merchant has been approved and can begin processing\n\nprocessing_enabled: True\nsettlement_enabled: True\nREJECTED: Merchant was rejected by the processor either because the information collected was invalid or it failed one of a number of regulatory and/or compliance checks (e.g. KYC, OFAC or MATCH)\n\nprocessing_enabled: False\nsettlement_enabled: False"
					},
					"response": []
				},
				{
					"name": "Fetch a Merchant",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sandboxAPI}}/merchants/{{merchantId}}",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "You can now fetch the previously created merchant to check its Onboarding State."
					},
					"response": []
				}
			],
			"description": "__Merchant Onboarding__ walks through the 3 steps it takes to create a new merchant.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{rolePartnerPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{rolePartnerUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create a Sale using a Card",
			"item": [
				{
					"name": "Create an Identity for a Buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"buyerId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": {\n        \"key\": \"value\"\n    },\n    \"entity\": {\n        \"phone\": \"7145677613\",\n        \"first_name\": \"Bob\",\n        \"last_name\": \"Diaz\",\n        \"email\": \"therock@gmail.com\",\n        \"personal_address\": {\n            \"city\": \"San Mateo\",\n            \"country\": \"USA\",\n            \"region\": \"CA\",\n            \"line2\": \"Apartment 7\",\n            \"line1\": \"741 Douglass St\",\n            \"postal_code\": \"94114\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities"
							]
						},
						"description": "Create an Identity that represents your buyer."
					},
					"response": []
				},
				{
					"name": "Tokenize a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"paymentInstrumentId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ayisha Kline\",\n    \"expiration_year\": 2029,\n    \"tags\": {\n        \"card_name\": \"Business Card\"\n    },\n    \"number\": \"4895142232120006\",\n    \"expiration_month\": 3,\n    \"address\": {\n        \"city\": \"San Francisco\",\n        \"region\": \"CA\",\n        \"postal_code\": \"94404\",\n        \"line1\": \"900 Metro Center Blv\",\n        \"country\": \"USA\"\n    },\n    \"security_code\": \"022\",\n    \"type\": \"PAYMENT_CARD\",\n    \"identity\": \"{{buyerId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/payment_instruments",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"payment_instruments"
							]
						},
						"description": "Create a Payment Instrument which represents the credit card you’ll be debiting (i.e. charging)."
					},
					"response": []
				},
				{
					"name": "Create Sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"transferId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant\": \"{{merchantId}}\",\n    \"currency\": \"USD\",\n    \"amount\": 2995,\n    \"source\": \"{{paymentInstrumentId}}\",\n    \"tags\": {\n        \"test\": \"sale\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/transfers",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "Next you’ll need to create a Transfer. To generate a Transfer we’ll supply the buyer’s Payment Instrument ID as the source field and the seller’s Merchant ID in the merchant field. Note that the amount field is in cents. These specific Transfers are distinguished by their type which return DEBIT."
					},
					"response": []
				},
				{
					"name": "Fetch a Transfer",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sandboxAPI}}/transfers/{{transferId}}",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"transfers",
								"{{transferId}}"
							]
						},
						"description": "Fetch a previously created Sale/Transfer."
					},
					"response": []
				}
			],
			"description": "Pre Requisite: You will need a merchant onboarded before you can create a sale. Refer to the Merchant Onboarding folder to create a new merchant.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{rolePartnerPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{rolePartnerUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Subscription Billing",
			"item": [
				{
					"name": "Fixed Time Interval Subscription",
					"item": [
						{
							"name": "Create Fixed Time Interval Subcription Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"scheduleId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"line_item_type\": \"FEE\",\n    \"nickname\": \"POS Rental Fee Schedule\",\n    \"fixed_time_interval_offset\": {\n        \"interval_count\": 4,\n        \"hourly_interval\": 168\n    },\n    \"subscription_type\": \"FIXED_TIME_INTERVAL\",\n    \"tags\": {\"description\": \"Create a schedule to charge an amount 4 times every 7 days\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules"
									]
								},
								"description": "First, we will create a Fixed time interval schedule that repeats 4 times (interval_count) every 7 days (hourly_interval, 24*7 = 168 hours)"
							},
							"response": []
						},
						{
							"name": "Create Subscription Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"subscriptionAmountId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount_type\": \"FEE\",\n    \"fee_amount_data\": {\n        \"currency\": \"USD\",\n        \"amount\": 25,\n        \"label\": \"POS_INSTALLMENT_FEE\"\n    },\n    \"nickname\": \"POS Rental Fee Subscription Amount\",\n    \"tags\": {\n        \"description\": \"Set the scubscription amount to $25\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_amounts",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_amounts"
									]
								},
								"description": "Next, we will create the amount for the subscription."
							},
							"response": []
						},
						{
							"name": "Create Subscription Enrollment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dateNow = new Date();  ",
											"var startedAt = new Date(dateNow.setDate(dateNow.getDate() + 1)).toISOString();",
											"pm.environment.set(\"startedAt\", startedAt);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"merchant\": \"{{merchantId}}\", \n        \"started_at\": \"{{startedAt}}\", \n        \"nickname\": \"POS Rental Fee\", \n        \"tags\": {\n            \"description\": \"POS Rental Fee Enrollment\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_enrollments",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_enrollments"
									]
								},
								"description": "Finally, you will enroll the Merchant for the subscription."
							},
							"response": []
						}
					],
					"description": "Ian’s IT Services, can charge Catie’s Computers: \n\n* A Fixed time fee of $100 for a POS rental. This will be paid out in four payments of $25, every 168 hours (24 hours x 7 days) until the $100 is paid"
				},
				{
					"name": "Periodic Monthly Fee Subscription",
					"item": [
						{
							"name": "Create Fixed Time Interval Subcription Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"scheduleId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"line_item_type\": \"FEE\",\n    \"period_offset\": {\n        \"day\": 1,\n        \"month\": null\n    },\n    \"nickname\": \"Monthly_Subscription_Schedule\",\n    \"subscription_type\": \"PERIODIC_MONTHLY\",\n    \"tags\": {\n        \"description\": \"Create a schedule to charge an amount on the 1st of every month\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules"
									]
								},
								"description": "First, we will create a Monthly interval schedule by providing which day of the month (period_offset.day) the subscription will be charged."
							},
							"response": []
						},
						{
							"name": "Create Subscription Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"subscriptionAmountId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount_type\": \"FEE\",\n    \"fee_amount_data\": {\n        \"currency\": \"USD\",\n        \"amount\": 10,\n        \"label\": \"POS_INSTALLMENT_FEE\"\n    },\n    \"nickname\": \"A Periodic-monthly data reporting fee of $10 \",\n    \"tags\": {\n        \"description\": \"A Periodic-monthly data reporting fee of $10 \"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_amounts",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_amounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Subscription Enrollment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dateNow = new Date();  ",
											"var startedAt = new Date(dateNow.setDate(dateNow.getDate() + 1)).toISOString();",
											"pm.environment.set(\"startedAt\", startedAt);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"merchant\": \"{{merchantId}}\", \n        \"started_at\": \"{{startedAt}}\", \n        \"nickname\": \"A Periodic-monthly data reporting fee of $10\", \n        \"tags\": {\n            \"description\": \"A Periodic-monthly data reporting fee of $10 \"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_enrollments",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_enrollments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Ian’s IT Services, can charge Catie’s Computers: \n\n* A Periodic-monthly data reporting fee of $10 to be charged on the 1st of every month"
				},
				{
					"name": "Periodic-yearly compliance fee",
					"item": [
						{
							"name": "Create Fixed Time Interval Subcription Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"scheduleId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"line_item_type\": \"FEE\",\n    \"period_offset\": {\n        \"day\": 1,\n        \"month\": 1\n    },\n    \"nickname\": \"Monthly_Subscription_Schedule\",\n    \"subscription_type\": \"PERIODIC_YEARLY\",\n    \"tags\": {\n        \"description\": \"Create a schedule to charge a yearly amount on the 1st of January\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules"
									]
								},
								"description": "First, we will create a Monthly interval schedule by providing which month and day of the month (period_offset.day and period_offset.month) the subscription will be charged."
							},
							"response": []
						},
						{
							"name": "Create Subscription Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseInJson = JSON.parse(responseBody);",
											"pm.environment.set(\"subscriptionAmountId\", responseInJson.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount_type\": \"FEE\",\n    \"fee_amount_data\": {\n        \"currency\": \"USD\",\n        \"amount\": 250,\n        \"label\": \"POS_INSTALLMENT_FEE\"\n    },\n    \"nickname\": \"Periodic-yearly compliance fee of $250\",\n    \"tags\": {\n        \"description\": \"Periodic-yearly compliance fee of $250\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_amounts",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_amounts"
									]
								},
								"description": "Next, we will create the amount for the subscription."
							},
							"response": []
						},
						{
							"name": "Create Subscription Enrollment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var dateNow = new Date();  ",
											"var startedAt = new Date(dateNow.setDate(dateNow.getDate() + 1)).toISOString();",
											"pm.environment.set(\"startedAt\", startedAt);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"merchant\": \"{{merchantId}}\", \n        \"started_at\": \"{{startedAt}}\", \n        \"nickname\": \"Periodic-yearly compliance fee of $250\", \n        \"tags\": {\n            \"description\": \"Periodic-yearly compliance fee of $250\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sandboxAPI}}/subscription/subscription_schedules/{{scheduleId}}/subscription_enrollments",
									"host": [
										"{{sandboxAPI}}"
									],
									"path": [
										"subscription",
										"subscription_schedules",
										"{{scheduleId}}",
										"subscription_enrollments"
									]
								},
								"description": "Finally, you will enroll the Merchant for the subscription."
							},
							"response": []
						}
					],
					"description": "Ian’s IT Services, can charge Catie’s Computers: \n\n* A Periodic-yearly compliance fee of $250 to be charged on the 1st day of every year"
				}
			],
			"description": "Finix’s Subscription Billing feature sets us up as a differentiator in the Payments industry. Our Subscription Billing model is unique as it allows Platforms, our customers to directly charge their sub-merchants on a recurring basis. Other subscription services only allow merchants to charge their buyers directly. This is the model for any streaming service such as Netflix or Hulu. The merchant (Netflix) charges their buyer (you) a monthly subscription fee. \n\nBefore we can discuss how to create a Subscription, you have to understand Finix’s hierarchy. Vertical SaaS companies, Finix customers are identified as Platforms in our hierarchy. Platforms can onboard sub-merchants under their Platform. These sub-merchants will be charged the subscription fee by the Platform. \n\nAn example of how a Platform can charge their sub-merchants is as follows: \n\nThe Platform in this instance is Ian’s IT Services. He has onboarded one sub-merchant, Catie’s Computers under him. He would like to create three different subscriptions for Catie’s Computers. \n\nFinix’s Subscription Billing model, allows Platforms to create three different types of subscription schedules and apply them to a sub-merchant(s). A subscription schedule details when the subscription fee is charged to a sub-merchant. The three available schedule types are: \n\n* Fixed-time: this schedule charges a sub-merchant on a fixed hourly interval \n* Periodic-monthly: this schedule charges a sub-merchant once a month on a particular date \n* Periodic-yearly:  this schedule charges a sub-merchant once a year on a particular month and date \n\n**Ian’s IT Services, can charge Catie’s Computers:**\n\n* A Fixed time fee of $100 for a POS rental. This will be paid out in four payments of $25, every 168 hours (24 hours x 7 days) until the $100 is paid\n* A Periodic-monthly data reporting fee of $10 to be charged on the 1st of every month \n* A Periodic-yearly compliance fee of $250 to be charged on the 1st day of every year\n\n## Pre Requisite\nYou will need to have a onboarded merchant. You can create a Merchant using the __Merchant Onboarding__ folder.\n\n### Note\nFor Subscription Billing, you will require ROLE_PLATFORM credentials. You can use the ones that are available in the Environment Variables file or use the credentials provided in the Curl command for Subscription Billing [here](https://finix.admin.payments-docs.com/#subscription-billing).",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{rolePlatformPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{rolePlatformUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update Merchant Information",
			"item": [
				{
					"name": "Fetch the identity associated to the Merchant",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sandboxAPI}}/identities/{{identity}}",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities",
								"{{identity}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the identity associated to the Merchant",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"entity\": {\n        \"title\": \"CEO\",\n        \"first_name\": \"dwayne\",\n        \"last_name\": \"Sunkhronos\",\n        \"email\": \"user@example.org\",\n        \"business_name\": \"Dunder Mifflin\",\n        \"business_type\": \"INDIVIDUAL_SOLE_PROPRIETORSHIP\",\n        \"doing_business_as\": \"Dunder Mifflin\",\n        \"phone\": \"1234567890\",\n        \"business_phone\": \"+1 (408) 756-4497\",\n        \"personal_address\": {\n            \"line1\": \"741 Douglass St\",\n            \"line2\": \"Apartment 71\",\n            \"city\": \"San Mateo\",\n            \"region\": \"CA\",\n            \"postal_code\": \"94114\",\n            \"country\": \"USA\"\n        },\n        \"business_address\": {\n            \"line1\": \"123 Main St\",\n            \"line2\": \"Unit 1\",\n            \"city\": \"San Jose\",\n            \"region\": \"CA\",\n            \"postal_code\": \"95123\",\n            \"country\": \"USA\"\n        },\n        \"mcc\": \"0742\",\n        \"dob\": {\n            \"day\": 27,\n            \"month\": 6,\n            \"year\": 1978\n        },\n        \"max_transaction_amount\": 12000000,\n        \"amex_mid\": null,\n        \"discover_mid\": null,\n        \"url\": \"www.DunderMifflin.com\",\n        \"annual_card_volume\": 12000000,\n        \"has_accepted_credit_cards_previously\": true,\n        \"incorporation_date\": {\n            \"day\": 27,\n            \"month\": 6,\n            \"year\": 1978\n        },\n        \"principal_percentage_ownership\": 50,\n        \"short_business_name\": null,\n        \"ownership_type\": \"PRIVATE\",\n        \"tax_authority\": null,\n        \"tax_id_provided\": true,\n        \"business_tax_id_provided\": true,\n        \"default_statement_descriptor\": \"Dunder Mifflin\"\n    },\n    \"tags\": {\n        \"Studio Rating\": \"4.7\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/identities/{{identity}}",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"identities",
								"{{identity}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Identity information on the underlying processor.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseInJson = JSON.parse(responseBody);",
									"pm.environment.set(\"verificationId\", responseInJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{sandboxAPI}}/merchants/{{merchantId}}/verifications",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}",
								"verifications"
							]
						},
						"description": "Update Identity information (e.g. Business Address) on the underlying processor."
					},
					"response": []
				},
				{
					"name": "Check the status of the Update Identity information on underlying processor",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sandboxAPI}}/merchants/{{merchantId}}/verifications",
							"host": [
								"{{sandboxAPI}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}",
								"verifications"
							]
						},
						"description": "Check the verification status with the underlying processor."
					},
					"response": []
				}
			],
			"description": "__Update Merchant Information__ Collection shows you how you can update Merchant Information.\n\n__Pre Requisite__ You should have a merchant identity created. To create and onboard a merchant, please run the __Merchant Onboarding__ collection.\n\n__Note__ that after the identity information is updated in Finix, to update the information with the underlying processor, you will need to update the merchant on the processor which is also documented in this collection.\n\n__Important__: The tax_id and business_tax_id fields cannot be updated. If either field was input incorrectly, create a new Identity resource.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{rolePartnerPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{rolePartnerUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Identity",
			"value": "{{identity}}"
		}
	]
}